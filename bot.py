from config import TOKEN, YMTOKEN
from db import BotDB

from aiogram.utils.markdown import escape_md
from keyboards.mainMenu import main_menu_kb, cancel_kb, invite_kb
from keyboards.tradingHall import trading_hall_kb
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
boost = [0.0001, 0.0005, 0.004, 0.01, 0.04]
basic_prices = [0.015, 0.1, 5, 30, 100]
basic_p_prices = [0.15, 1, 50, 300, 1000]
deposit = [150, 300, 500, 1000]
BotDB = BotDB('database.db')

WEBHOOK_HOST = 'localhost'
WEBHOOK_PATH = ""


class SellCoins(StatesGroup):
    amount = State()
    price = State()


class Registration(StatesGroup):
    username = State()
    inviter = State()


def is_int(a):
    try:
        return type(int(a)) == int
    except Exception:
        return False


@dp.message_handler(commands=['start'], state=None)
async def start(message: types.message):
    user_id = message.from_user.id
    if not BotDB.user_exists(user_id):
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º')
        await Registration.username.set()
    else:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=main_menu_kb)


@dp.message_handler(state=Registration.username)
async def set_username(message: types.message, state: FSMContext):
    if len(message.text) > 20:
        await message.answer("üõë –î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞—è –±—ã—Ç—å –º–µ–Ω—å—à–µ 20 —Å–∏–º–≤–æ–ª–æ–≤!")
    else:
        await Registration.next()
        async with state.proxy() as data:
            data['username'] = str(message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –≤–∞—Å", reply_markup=invite_kb)


@dp.message_handler(lambda m: m.text == '–ú–µ–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª', state=Registration.inviter)
async def set_me(message: types.message, state: FSMContext):
    async with state.proxy() as data:
        data['inviter'] = '566949209'
        BotDB.add_user(message.from_user.id, data['username'], data['inviter'])
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!", reply_markup=main_menu_kb)
    await state.finish()


@dp.message_handler(state=Registration.inviter)
async def set_inviter(message: types.message, state: FSMContext):
    if not BotDB.user_exists(message.text):
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        async with state.proxy() as data:
            data['inviter'] = message.text
            BotDB.add_user(message.from_user.id, data['username'], data['inviter'])
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!", reply_markup=main_menu_kb)
        await state.finish()


@dp.message_handler(state=None)
async def handler(message: types.message):
    if message.chat.type == 'private':
        user_data = BotDB.get_user(message.from_user.id)
        user_id = user_data[0]
        username = user_data[1]
        purse = user_data[2]
        excavation = user_data[3]
        passive_income = user_data[4]
        clicks = user_data[6]
        last_c = user_data[7]
        upgrades = [user_data[8], user_data[9], user_data[10], user_data[11], user_data[12]]
        p_upgrades = [user_data[13], user_data[14], user_data[15], user_data[16], user_data[17]]
        warehouse = user_data[18]
        money = user_data[19]
        text = message.text.lower()

        if text == 'üéÆ –∫–ª–∏–∫':
            print(user_id, 'click')
            purse = BotDB.click(user_id=user_id, purse=purse, excavation=excavation, clicks=clicks)
            await message.answer(f'–í—ã–ø–æ–ª–Ω–µ–Ω –∫–ª–∏–∫\n–ë–∞–ª–∞–Ω—Å: {round(purse, 4)}', reply_markup=main_menu_kb)

        elif text == 'üë§ –ø—Ä–æ—Ñ–∏–ª—å':
            print(user_id, 'profile')
            text = f'*üìå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape_md(username)}*\n' \
                   f'\n' \
                   f'üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ||{user_id}|| \n\n' \
                   f'üéÆ –ö–ª–∏–∫–æ–≤ —Å–¥–µ–ª–∞–Ω–æ: *{clicks}*\n\n' \
                   f'‚õè –î–æ–±—ã—á–∞ —Å –∫–ª–∏–∫–∞: *{escape_md(str(round(excavation, 4)))}*\n\n' \
                   f'üí§ –ü–∞—Å—Å–∏–≤–Ω–∞—è –¥–æ–±—ã—á–∞: *{escape_md(str(round(passive_income, 4)))}*\n\n' \
                   f'üí∞ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: *{escape_md(str(round(purse, 4)))}*\n\n' \
                   f'üíµ –î–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É: *{escape_md(str(round(money, 4)))}‚ÇΩ*'
            await message.answer(text, parse_mode='Markdownv2')

        elif text == '‚õè –∞–∫—Ç–∏–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è':
            for i in range(5):
                await bot.send_message(message.chat.id, f"‚¨Ü *–£–ª—É—á—à–µ–Ω–∏–µ {i + 1}*\n\n"
                                                        f"–ü–æ–≤—ã—à–∞–µ—Ç –¥–æ–±—ã—á—É –Ω–∞ *{boost[i]}*\n"
                                                        f"–ö–æ–ª-–≤–æ: *{upgrades[i]}*\n"
                                                        f"–¶–µ–Ω–∞: *{round(basic_prices[i] * (1.2 ** upgrades[i]), 4)}*",
                                       reply_markup=InlineKeyboardMarkup().add(
                                           InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data=i)),
                                       parse_mode='Markdown'
                                       )

        elif text == 'üí§ –ø–∞—Å—Å–∏–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è':
            for i in range(5):
                await bot.send_message(message.chat.id, f"‚¨Ü *–ü–∞—Å—Å–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ {i + 1}*\n\n"
                                                        f"–ü–æ–≤—ã—à–∞–µ—Ç –ø–∞—Å—Å–∏–≤–Ω—É—é –¥–æ–±—ã—á—É –Ω–∞ *{boost[i]} –º–æ–Ω–µ—Ç/—Å–µ–∫*\n"
                                                        f"–ö–æ–ª-–≤–æ: *{p_upgrades[i]}*\n"
                                                        f"–¶–µ–Ω–∞: *{round(basic_p_prices[i] * (1.2 ** p_upgrades[i]), 4)}*",
                                       reply_markup=InlineKeyboardMarkup().add(
                                           InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data=i + 5)),
                                       parse_mode='Markdown'
                                       )

        elif text == 'üì¶ —Å–∫–ª–∞–¥':
            warehouse = BotDB.update_warehouse(user_id)
            await message.answer(f"–ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –º–æ–Ω–µ—Ç—ã, –¥–æ–±—ã—Ç—ã–µ –ø–∞—Å—Å–∏–≤–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏.\n\n"
                                 f"–°–µ–π—á–∞—Å —Å–∫–ª–∞–¥–µ –∏–º–µ–µ—Ç—Å—è *{round(warehouse, 4)}* –º–æ–Ω–µ—Ç",
                                 reply_markup=InlineKeyboardMarkup().add(
                                     InlineKeyboardButton('–ó–∞–±—Ä–∞—Ç—å', callback_data=-1)),
                                 parse_mode='Markdown')

        elif text == 'üèõ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞':
            await message.answer("*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É!*\n\n"
                                 "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å/–∫—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã –∑–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–µ–Ω—å–≥–∏.",
                                 reply_markup=trading_hall_kb, parse_mode='Markdown')

        elif text == 'üîô –Ω–∞–∑–∞–¥':
            await message.answer("üîô –ù–∞–∑–∞–¥", reply_markup=main_menu_kb)

        elif text == 'üí≥ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç':
            deposit_kb = InlineKeyboardMarkup()
            for i in deposit:
                deposit_kb = deposit_kb.add(InlineKeyboardButton(f'{i}‚ÇΩ', callback_data=i))
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup=deposit_kb)

        elif text == 'üöö –ø—Ä–æ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã':
            is_selling = BotDB.is_selling(user_id=user_id)
            if not is_selling:
                await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –ø—Ä–æ–¥–∞–µ—Ç–µ –º–æ–Ω–µ—Ç", reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç", callback_data="sell_coins")
                ))
            else:
                sell_data = BotDB.get_sell(message.from_user.id)
                amount = sell_data[0]
                price = sell_data[1]
                await message.answer(f"*–í–∞—à –ª–æ—Ç*\n"
                                     f"–ö–æ–ª-–≤–æ –º–æ–Ω–µ—Ç: *{round(amount, 4)}*\n"
                                     f"–¶–µ–Ω–∞ –∑–∞ –º–æ–Ω–µ—Ç—É: *{round(price, 4)}*\n"
                                     f"–¶–µ–Ω–∞ –∑–∞ –≤—Å–µ: *{round(amount * price, 4)}*\n",
                                     reply_markup=InlineKeyboardMarkup().add(
                                         InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç", callback_data="delete_sell")),
                                     parse_mode='Markdown'
                                     )

        else:
            await message.answer("üõë –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", reply_markup=main_menu_kb)


@dp.callback_query_handler(lambda x: x.data == 'sell_coins', state=None)
async def sell_coins(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await SellCoins.amount.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å (–º–∏–Ω–∏–º—É–º 1):",
                           reply_markup=cancel_kb)


@dp.callback_query_handler(lambda x: x.data == 'delete_sell', state=None)
async def delete_sell(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    BotDB.delete_sell(callback_query.from_user.id)


@dp.message_handler(lambda m: m.text == '–û—Ç–º–µ–Ω–∞', state=SellCoins)
async def cancel(message: types.message, state: FSMContext):
    await state.finish()
    await message.answer("–û—Ç–º–µ–Ω–∞", reply_markup=trading_hall_kb)


@dp.message_handler(state=SellCoins.amount)
async def set_amount(message: types.message, state: FSMContext):
    try:
        if float(message.text) <= BotDB.get_purse(message.from_user.id):
            if float(message.text) > 1:
                async with state.proxy() as data:
                    data['amount'] = float(message.text)
                    await SellCoins.next()
                    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ 1 –º–æ–Ω–µ—Ç—É", reply_markup=cancel_kb)
            else:
                await message.answer("üõë –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ - 1 –º–æ–Ω–µ—Ç–∞")
        else:
            await message.answer("üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    except Exception:
        await message.answer("üõë –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥")


@dp.message_handler(state=SellCoins.price)
async def set_price(message: types.message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['price'] = float(message.text)
        async with state.proxy() as data:
            print(data)
            BotDB.create_sell(message.from_user.id, data['amount'], data['price'])
        await state.finish()
        await message.answer("‚úÖ –õ–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=trading_hall_kb)
    except Exception:
        await message.answer("üõë –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ üõë")


@dp.callback_query_handler(lambda x: is_int(x.data) and int(x.data) == -1, state=None)
async def collect_warehouse(callback_query: types.CallbackQuery):
    BotDB.update_warehouse(user_id=BotDB.get_user(callback_query.from_user.id)[0])
    user_data = BotDB.get_user(callback_query.from_user.id)
    user_id = user_data[0]
    purse = user_data[2]
    warehouse = user_data[18]
    BotDB.collect_warehouse(user_id=user_id)
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–ª–∞–¥–∞\n \n"
                                                        f"üí∞ –ë–∞–ª–∞–Ω—Å: {round(purse + warehouse, 4)}")


@dp.callback_query_handler(lambda x: is_int(x.data) and 0 <= int(x.data) <= 4, state=None)
async def buy_active_upgrade(callback_query: types.CallbackQuery):
    user_data = BotDB.get_user(callback_query.from_user.id)
    user_id = user_data[0]
    excavation = user_data[3]
    upgrades = [user_data[8], user_data[9], user_data[10], user_data[11], user_data[12]]
    purse = user_data[2]
    i = int(callback_query.data)
    price = basic_prices[i] * (1.2 ** upgrades[i])
    if purse >= price:

        text = f"‚¨Ü *–£–ª—É—á—à–µ–Ω–∏–µ {i + 1}*\n\n" \
               f"–ü–æ–≤—ã—à–∞–µ—Ç –¥–æ–±—ã—á—É –Ω–∞ *{boost[i]}*\n" \
               f"–ö–æ–ª-–≤–æ: *{upgrades[i] + 1}*\n" \
               f"–¶–µ–Ω–∞: *{round(basic_prices[i] * (1.2 ** (upgrades[i] + 1)), 4)}*"

        chat_id = callback_query.message.chat.id
        message_id = callback_query.message.message_id
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, parse_mode='Markdown',
                                    reply_markup=InlineKeyboardMarkup().add(
                                        InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data=i)),
                                    )
        purse = BotDB.buy_upgrade(user_id=user_id, excavation=excavation, excavation_upgrade=boost[i], purse=purse,
                                  upgrade_number=i,
                                  upgrade_price=price)
        await bot.send_message(callback_query.from_user.id, f'‚úÖ *–ö—É–ø–ª–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ {int(callback_query.data) + 1}*\n\n'
                                                            f'üí∞ –ë–∞–ª–∞–Ω—Å: {round(purse, 4)}',
                               parse_mode='Markdown')
    else:
        await bot.send_message(callback_query.from_user.id, f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')


@dp.callback_query_handler(lambda x: is_int(x.data) and 5 <= int(x.data) <= 9)
async def buy_passive_upgrade(callback_query: types.CallbackQuery):
    user_data = BotDB.get_user(callback_query.from_user.id)
    user_id = user_data[0]
    passive_income = user_data[4]
    p_upgrades = [user_data[13], user_data[14], user_data[15], user_data[16], user_data[17]]
    purse = user_data[2]
    i = int(callback_query.data) - 5
    price = basic_p_prices[i] * (1.2 ** p_upgrades[i])
    if purse >= price:

        text = f"‚¨Ü *–ü–∞—Å—Å–∏–≤–Ω–æ–µ –£–ª—É—á—à–µ–Ω–∏–µ {i}*\n\n" \
               f"–ü–æ–≤—ã—à–∞–µ—Ç –ø–∞—Å—Å–∏–≤–Ω—É—é –¥–æ–±—ã—á—É –Ω–∞ *{boost[i]}*\n" \
               f"–ö–æ–ª-–≤–æ: *{p_upgrades[i] + 1}*\n" \
               f"–¶–µ–Ω–∞: *{round(basic_p_prices[i] * (1.2 ** (p_upgrades[i] + 1)), 4)}*"

        chat_id = callback_query.message.chat.id
        message_id = callback_query.message.message_id
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, parse_mode='Markdown',
                                    reply_markup=InlineKeyboardMarkup().add(
                                        InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data=i + 5)),
                                    )
        purse = BotDB.buy_p_upgrade(user_id=user_id, passive_income=passive_income, income_upgrade=boost[i],
                                    purse=purse,
                                    upgrade_number=i,
                                    upgrade_price=price)
        await bot.send_message(callback_query.from_user.id,
                               f'‚úÖ *–ö—É–ø–ª–µ–Ω–æ –ø–∞—Å—Å–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ {int(callback_query.data) - 4}*\n\n'
                               f'üí∞ –ë–∞–ª–∞–Ω—Å: {round(purse, 4)}',
                               parse_mode='Markdown')
    else:
        await bot.send_message(callback_query.from_user.id, f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')


@dp.callback_query_handler(lambda x: is_int(x.data) and x.data in deposit)
async def deposit_money(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_invoice(chat_id=callback_query.from_user.id,
                           title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ FunCoin",
                           description=str(callback_query.from_user.id),
                           payload=str(callback_query.data),
                           provider_token=YMTOKEN,
                           currency="RUB",
                           start_parameter="test",
                           prices=[{"label": "–†—É–±", "amount": int(callback_query.data) * 110}]
                           )


@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=types.ContentTypes.SUCCESSFUL_PAYMENT)
async def process_pay(message: types.Message):
    BotDB.deposit(user_id=message.from_user.id, money=message.successful_payment.invoice_payload)
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å—á–µ—Ç –Ω–∞ {message.successful_payment.invoice_payload}‚ÇΩ")


executor.start_polling(dp, skip_updates=True)

if __name__ == '__main__':
    executor.start_webhook(dp)
